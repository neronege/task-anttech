<div class="slider-container">
    <div class="slider-track" style="@($"transform: translateX({Offset}px);")">
        @foreach (var item in Items)
        {
            <div class="slider-item">
                <i class="@item.Icon"></i>
                <p>@item.Text</p>
                <div class="d-flex">
                    <span style="font-weight:600">@item.Number</span><span>/@item.Text2</span>
                </div>
            </div>
        }
    </div>
</div>



@code {
    private List<SliderItem> Items = new()
    {
        new SliderItem { Icon = "fa-solid fa-charging-station", Text = "Ortalama Sarj Sıklığı",   Number=0, Text2 = "hafta"},
        new SliderItem { Icon = "fa-solid fa-charging-station",  Text = "Ortalama Sarj Sıklığı",  Number=0, Text2 = "hafta"},
        new SliderItem { Icon = "fa-solid fa-charging-station",  Text = "Ortalama Sarj Sıklığı",    Number=0, Text2 = "hafta" },
        new SliderItem { Icon = "fa-solid fa-charging-station",  Text = "Ortalama Sarj Sıklığı",    Number=0, Text2 = "hafta" }
    };

    private int Offset = 0; 
    private int SliderWidth => Items.Count * 200; 

    protected override async Task OnInitializedAsync()
    {
        while (true)
        {
            await Task.Delay(50);
            Offset -= 2; 

            //Slider'daki öğelerin toplam genişliği aşmaması için verilen koşul

            if (Math.Abs(Offset)*Items.Count >= SliderWidth)
            {
                Offset = 0;
            }

            StateHasChanged(); 
        }
    }

    //Api service olmadığı için Entity Klasörü içerisinde kullanılmamıştır.
    public class SliderItem
    {
        public string? Icon { get; set; }
        public string? Text { get; set; }
        public string? Text2 { get; set; }
        public int Number { get; set; }
    }
}
